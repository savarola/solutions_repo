{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Investigating the Range as a Function of the Angle of Projection Motivation Projectile motion offers a fascinating opportunity to explore physics principles, where equations governing the motion of projectiles describe not just the motion of objects like soccer balls or rockets but can also be extended to study more complex systems in engineering and astrophysics. The basic setup involves the analysis of how the range (the horizontal distance traveled) of a projectile depends on the angle of projection. 1. Theoretical Foundation: Derivation of the Governing Equations Projectile motion is typically modeled in two dimensions (horizontal and vertical) under the influence of gravity. We start by analyzing the motion in both directions independently. Horizontal motion (x-direction): The horizontal velocity is constant, as there are no forces acting horizontally (assuming no air resistance). \\[ \\frac{d^2 x}{dt^2} = 0 \\quad \\Rightarrow \\quad \\frac{dx}{dt} = v_0 \\cos(\\theta) \\] Where: - \\(v_0\\) is the initial velocity. - \\(\\theta\\) is the launch angle. The solution to this differential equation is: \\[ x(t) = v_0 \\cos(\\theta) \\cdot t \\] Vertical motion (y-direction): The vertical motion is influenced by gravity, which causes a downward acceleration. \\[ \\frac{d^2 y}{dt^2} = -g \\] Where \\(g\\) is the acceleration due to gravity (approximately \\(9.8 \\, \\text{m/s}^2\\) on Earth). The solution to this differential equation is: \\[ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\] This equation describes the height of the projectile as a function of time. Time of Flight and Range To find the time of flight, we set \\(y(t) = 0\\) because the projectile will return to the ground when it reaches the same vertical position (height = 0). Solving for \\(t\\) , we get: \\[ 0 = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\] This simplifies to: \\[ t = \\frac{2 v_0 \\sin(\\theta)}{g} \\] The range \\(R\\) of the projectile is the horizontal distance it travels when it reaches the ground, which occurs at time \\(t\\) . From the horizontal motion equation, we have: \\[ R = x(t) = v_0 \\cos(\\theta) \\cdot t = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} \\] Simplifying the expression: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] This is the equation for the range of a projectile. 2. Analysis of the Range: Range as a Function of the Launch Angle From the derived equation: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] We observe that the range \\(R\\) depends on: - The initial velocity \\(v_0\\) , - The launch angle \\(\\theta\\) , - The gravitational acceleration \\(g\\) . Since \\(\\sin(2\\theta)\\) reaches its maximum value of 1 when \\(2\\theta = 90^\\circ\\) , this means the optimal launch angle for maximum range is: \\[ \\theta = 45^\\circ \\] Thus, the range is maximized at a \\(45^\\circ\\) launch angle. As \\(\\theta\\) deviates from \\(45^\\circ\\) , the range decreases due to the behavior of the sine function. Influence of Initial Velocity and Gravitational Acceleration Initial Velocity \\(v_0\\) : The range increases with the square of the initial velocity. This means that increasing the initial speed at which the projectile is launched increases the range, but the relationship is quadratic. Gravitational Acceleration \\(g\\) : The range decreases as gravity increases. If gravity is stronger (like on a larger planet), the range will be smaller for the same initial velocity and launch angle. 3. Practical Applications: This model can be applied to many real-world scenarios, such as: - Sports : In games like soccer, basketball, and golf, the angle at which a ball is kicked, thrown, or hit can dramatically affect the distance traveled. - Engineering : This model can be used to calculate the range of artillery shells, missiles, or drones, considering varying initial velocities and launch angles. - Astrophysics : The principles of projectile motion under gravity are useful in studying the trajectories of satellites, space probes, and other celestial objects. 4. Implementation: To simulate the projectile motion and visualize the range as a function of the launch angle, you can write a Python script using libraries such as NumPy and Matplotlib. Here\u2019s an implementation of the simulation: import numpy as np import matplotlib.pyplot as plt # Constants g = 9.8 # acceleration due to gravity (m/s^2) v0 = 20 # initial velocity (m/s) # Define a function to calculate the range for a given angle def range_of_projectile(v0, theta_deg, g): theta = np.radians(theta_deg) # convert angle to radians return (v0**2 * np.sin(2*theta)) / g # Angle range from 0 to 90 degrees angles = np.linspace(0, 90, 500) # Calculate the range for each angle ranges = range_of_projectile(v0, angles, g) # Plot the results plt.figure(figsize=(8, 6)) plt.plot(angles, ranges, label=\"Range vs Angle\") plt.title(\"Projectile Range as a Function of Launch Angle\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.legend() plt.show() Output Interpretation This graph will display the projectile range as a function of the launch angle, showing that the range is maximized at a $45^\\circ$ angle and decreases as the angle deviates from this optimal value. https://colab.research.google.com/drive/109lrp068uFr13UuE4VJkmi05Ge6HLrbp#scrollTo=hlaUyLsXjybk&line=52&uniqifier=1 5. Limitations and Suggestions for Improvements: The current model assumes: No air resistance, which isn't realistic for most real-world projectiles. Flat ground, neglecting any effects of terrain variation. Constant gravitational acceleration, which isn't accurate for higher altitudes or other celestial bodies. To improve the model, you could: Incorporate air resistance using drag equations to model the deceleration of the projectile. Account for varying terrain by modifying the initial and final conditions of the projectile\u2019s path. Consider varying gravity for different planetary conditions (e.g., Mars, Moon). Conclusion Through this task, we explored the fundamental principles of projectile motion and derived the governing equations. By analyzing how the range depends on the launch angle, initial velocity, and gravity, we gained insight into both the physics and practical applications of projectile motion. The implementation of a simulation further enhances the understanding by visualizing the relationships and behaviors. Finally, by reflecting on the limitations of the idealized model, we identified possible improvements for more accurate real-world modeling.","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion offers a fascinating opportunity to explore physics principles, where equations governing the motion of projectiles describe not just the motion of objects like soccer balls or rockets but can also be extended to study more complex systems in engineering and astrophysics. The basic setup involves the analysis of how the range (the horizontal distance traveled) of a projectile depends on the angle of projection.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#derivation-of-the-governing-equations","text":"Projectile motion is typically modeled in two dimensions (horizontal and vertical) under the influence of gravity. We start by analyzing the motion in both directions independently.","title":"Derivation of the Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion-x-direction","text":"The horizontal velocity is constant, as there are no forces acting horizontally (assuming no air resistance). \\[ \\frac{d^2 x}{dt^2} = 0 \\quad \\Rightarrow \\quad \\frac{dx}{dt} = v_0 \\cos(\\theta) \\] Where: - \\(v_0\\) is the initial velocity. - \\(\\theta\\) is the launch angle. The solution to this differential equation is: \\[ x(t) = v_0 \\cos(\\theta) \\cdot t \\]","title":"Horizontal motion (x-direction):"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion-y-direction","text":"The vertical motion is influenced by gravity, which causes a downward acceleration. \\[ \\frac{d^2 y}{dt^2} = -g \\] Where \\(g\\) is the acceleration due to gravity (approximately \\(9.8 \\, \\text{m/s}^2\\) on Earth). The solution to this differential equation is: \\[ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\] This equation describes the height of the projectile as a function of time.","title":"Vertical motion (y-direction):"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight-and-range","text":"To find the time of flight, we set \\(y(t) = 0\\) because the projectile will return to the ground when it reaches the same vertical position (height = 0). Solving for \\(t\\) , we get: \\[ 0 = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\] This simplifies to: \\[ t = \\frac{2 v_0 \\sin(\\theta)}{g} \\] The range \\(R\\) of the projectile is the horizontal distance it travels when it reaches the ground, which occurs at time \\(t\\) . From the horizontal motion equation, we have: \\[ R = x(t) = v_0 \\cos(\\theta) \\cdot t = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} \\] Simplifying the expression: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] This is the equation for the range of a projectile.","title":"Time of Flight and Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-as-a-function-of-the-launch-angle","text":"From the derived equation: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] We observe that the range \\(R\\) depends on: - The initial velocity \\(v_0\\) , - The launch angle \\(\\theta\\) , - The gravitational acceleration \\(g\\) . Since \\(\\sin(2\\theta)\\) reaches its maximum value of 1 when \\(2\\theta = 90^\\circ\\) , this means the optimal launch angle for maximum range is: \\[ \\theta = 45^\\circ \\] Thus, the range is maximized at a \\(45^\\circ\\) launch angle. As \\(\\theta\\) deviates from \\(45^\\circ\\) , the range decreases due to the behavior of the sine function.","title":"Range as a Function of the Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#influence-of-initial-velocity-and-gravitational-acceleration","text":"Initial Velocity \\(v_0\\) : The range increases with the square of the initial velocity. This means that increasing the initial speed at which the projectile is launched increases the range, but the relationship is quadratic. Gravitational Acceleration \\(g\\) : The range decreases as gravity increases. If gravity is stronger (like on a larger planet), the range will be smaller for the same initial velocity and launch angle.","title":"Influence of Initial Velocity and Gravitational Acceleration"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"This model can be applied to many real-world scenarios, such as: - Sports : In games like soccer, basketball, and golf, the angle at which a ball is kicked, thrown, or hit can dramatically affect the distance traveled. - Engineering : This model can be used to calculate the range of artillery shells, missiles, or drones, considering varying initial velocities and launch angles. - Astrophysics : The principles of projectile motion under gravity are useful in studying the trajectories of satellites, space probes, and other celestial objects.","title":"3. Practical Applications:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"To simulate the projectile motion and visualize the range as a function of the launch angle, you can write a Python script using libraries such as NumPy and Matplotlib. Here\u2019s an implementation of the simulation: import numpy as np import matplotlib.pyplot as plt # Constants g = 9.8 # acceleration due to gravity (m/s^2) v0 = 20 # initial velocity (m/s) # Define a function to calculate the range for a given angle def range_of_projectile(v0, theta_deg, g): theta = np.radians(theta_deg) # convert angle to radians return (v0**2 * np.sin(2*theta)) / g # Angle range from 0 to 90 degrees angles = np.linspace(0, 90, 500) # Calculate the range for each angle ranges = range_of_projectile(v0, angles, g) # Plot the results plt.figure(figsize=(8, 6)) plt.plot(angles, ranges, label=\"Range vs Angle\") plt.title(\"Projectile Range as a Function of Launch Angle\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.legend() plt.show() Output Interpretation This graph will display the projectile range as a function of the launch angle, showing that the range is maximized at a $45^\\circ$ angle and decreases as the angle deviates from this optimal value. https://colab.research.google.com/drive/109lrp068uFr13UuE4VJkmi05Ge6HLrbp#scrollTo=hlaUyLsXjybk&line=52&uniqifier=1","title":"4. Implementation:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-limitations-and-suggestions-for-improvements","text":"The current model assumes: No air resistance, which isn't realistic for most real-world projectiles. Flat ground, neglecting any effects of terrain variation. Constant gravitational acceleration, which isn't accurate for higher altitudes or other celestial bodies. To improve the model, you could: Incorporate air resistance using drag equations to model the deceleration of the projectile. Account for varying terrain by modifying the initial and final conditions of the projectile\u2019s path. Consider varying gravity for different planetary conditions (e.g., Mars, Moon). Conclusion Through this task, we explored the fundamental principles of projectile motion and derived the governing equations. By analyzing how the range depends on the launch angle, initial velocity, and gravity, we gained insight into both the physics and practical applications of projectile motion. The implementation of a simulation further enhances the understanding by visualizing the relationships and behaviors. Finally, by reflecting on the limitations of the idealized model, we identified possible improvements for more accurate real-world modeling.","title":"5. Limitations and Suggestions for Improvements:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Investigating the Dynamics of a Forced Damped Pendulum Motivation The forced damped pendulum represents a fascinating example of nonlinear dynamics. When both damping and external forcing are introduced, the pendulum displays a wide array of behaviors\u2014from simple periodic motion to resonance and chaos. These dynamics mirror those found in systems such as climate models, mechanical resonators, and electrical circuits. 1. Theoretical Foundation The motion of a forced damped pendulum is governed by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A \\cos(\\omega t) \\] Where: \\(\\theta\\) is the angular displacement, \\(b\\) is the damping coefficient, \\(g\\) is the acceleration due to gravity, \\(L\\) is the length of the pendulum, \\(A\\) is the amplitude of the driving force, \\(\\omega\\) is the driving frequency. Small-Angle Approximation For small \\(\\theta\\) , we can use the approximation \\(\\sin\\theta \\approx \\theta\\) , reducing the equation to: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega t) \\] This is a linear non-homogeneous differential equation with a general solution composed of a transient (homogeneous) and a steady-state (particular) solution. Resonance Resonance occurs when the driving frequency \\(\\omega\\) is close to the natural frequency of the system: \\[ \\omega_0 = \\sqrt{\\frac{g}{L}} \\] At resonance, the system can exhibit large amplitude oscillations, especially when damping is low ( \\(b \\ll 1\\) ). The amplitude of steady-state oscillations is maximized near resonance. 2. Analysis of Dynamics To study the system numerically, we convert the second-order equation into two first-order ODEs: Let: - \\(\\theta_1 = \\theta\\) - \\(\\theta_2 = \\frac{d\\theta}{dt}\\) Then: \\[ \\frac{d\\theta_1}{dt} = \\theta_2 \\] \\[ \\frac{d\\theta_2}{dt} = -b \\theta_2 - \\frac{g}{L} \\sin\\theta_1 + A \\cos(\\omega t) \\] Parameter Effects Damping ( \\(b\\) ) : Reduces amplitude and can suppress chaotic behavior. Driving Amplitude ( \\(A\\) ) : Higher values can induce chaotic behavior. Driving Frequency ( \\(\\omega\\) ) : Determines resonance conditions and the potential for complex behavior. Transition to Chaos As parameters (e.g., \\(A\\) , \\(\\omega\\) ) are varied, the system transitions from periodic to quasiperiodic, and eventually to chaotic motion. Indicators include: Sensitivity to initial conditions, Strange attractors in phase space, Irregular time series. 3. Practical Applications Energy Harvesting Devices : Use resonant mechanical systems to convert vibrational energy. Suspension Bridges : Modeled using driven oscillators under periodic loading. Oscillating Electrical Circuits : Analogous to forced damped pendulums (e.g., RLC circuits). Biomechanics : Human gait and limb motion can be approximated by driven pendulums. 4. Implementation Python Simulation Outline import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 L = 1.0 b = 0.5 A = 1.2 omega = 2/3 # ODE System def pendulum(t, y): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -b * omega_dot - (g / L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions y0 = [0.2, 0.0] # Time span t_span = (0, 100) t_eval = np.linspace(*t_span, 5000) # Solve ODE sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval) # Plot theta vs time plt.plot(sol.t, sol.y[0]) plt.xlabel(\"Time (s)\") plt.ylabel(\"Theta (rad)\") plt.title(\"Forced Damped Pendulum\") plt.grid() plt.show() import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g, L, b, A, omega = 9.81, 1.0, 0.5, 1.2, 2/3 t_span = (0, 100) t_eval = np.linspace(*t_span, 5000) y0 = [0.2, 0.0] def pendulum(t, y): theta, omega_dot = y return [omega_dot, -b * omega_dot - (g / L) * np.sin(theta) + A * np.cos(omega * t)] sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval) import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g, L, b, A, omega = 9.81, 1.0, 0.5, 1.2, 2/3 t_span = (0, 100) t_eval = np.linspace(*t_span, 5000) y0 = [0.2, 0.0] def pendulum(t, y): theta, omega_dot = y return [omega_dot, -b * omega_dot - (g / L) * np.sin(theta) + A * np.cos(omega * t)] sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval)","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum represents a fascinating example of nonlinear dynamics. When both damping and external forcing are introduced, the pendulum displays a wide array of behaviors\u2014from simple periodic motion to resonance and chaos. These dynamics mirror those found in systems such as climate models, mechanical resonators, and electrical circuits.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The motion of a forced damped pendulum is governed by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A \\cos(\\omega t) \\] Where: \\(\\theta\\) is the angular displacement, \\(b\\) is the damping coefficient, \\(g\\) is the acceleration due to gravity, \\(L\\) is the length of the pendulum, \\(A\\) is the amplitude of the driving force, \\(\\omega\\) is the driving frequency.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small \\(\\theta\\) , we can use the approximation \\(\\sin\\theta \\approx \\theta\\) , reducing the equation to: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega t) \\] This is a linear non-homogeneous differential equation with a general solution composed of a transient (homogeneous) and a steady-state (particular) solution.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance","text":"Resonance occurs when the driving frequency \\(\\omega\\) is close to the natural frequency of the system: \\[ \\omega_0 = \\sqrt{\\frac{g}{L}} \\] At resonance, the system can exhibit large amplitude oscillations, especially when damping is low ( \\(b \\ll 1\\) ). The amplitude of steady-state oscillations is maximized near resonance.","title":"Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"To study the system numerically, we convert the second-order equation into two first-order ODEs: Let: - \\(\\theta_1 = \\theta\\) - \\(\\theta_2 = \\frac{d\\theta}{dt}\\) Then: \\[ \\frac{d\\theta_1}{dt} = \\theta_2 \\] \\[ \\frac{d\\theta_2}{dt} = -b \\theta_2 - \\frac{g}{L} \\sin\\theta_1 + A \\cos(\\omega t) \\]","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameter-effects","text":"Damping ( \\(b\\) ) : Reduces amplitude and can suppress chaotic behavior. Driving Amplitude ( \\(A\\) ) : Higher values can induce chaotic behavior. Driving Frequency ( \\(\\omega\\) ) : Determines resonance conditions and the potential for complex behavior.","title":"Parameter Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"As parameters (e.g., \\(A\\) , \\(\\omega\\) ) are varied, the system transitions from periodic to quasiperiodic, and eventually to chaotic motion. Indicators include: Sensitivity to initial conditions, Strange attractors in phase space, Irregular time series.","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Energy Harvesting Devices : Use resonant mechanical systems to convert vibrational energy. Suspension Bridges : Modeled using driven oscillators under periodic loading. Oscillating Electrical Circuits : Analogous to forced damped pendulums (e.g., RLC circuits). Biomechanics : Human gait and limb motion can be approximated by driven pendulums.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-simulation-outline","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 L = 1.0 b = 0.5 A = 1.2 omega = 2/3 # ODE System def pendulum(t, y): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -b * omega_dot - (g / L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions y0 = [0.2, 0.0] # Time span t_span = (0, 100) t_eval = np.linspace(*t_span, 5000) # Solve ODE sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval) # Plot theta vs time plt.plot(sol.t, sol.y[0]) plt.xlabel(\"Time (s)\") plt.ylabel(\"Theta (rad)\") plt.title(\"Forced Damped Pendulum\") plt.grid() plt.show() import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g, L, b, A, omega = 9.81, 1.0, 0.5, 1.2, 2/3 t_span = (0, 100) t_eval = np.linspace(*t_span, 5000) y0 = [0.2, 0.0] def pendulum(t, y): theta, omega_dot = y return [omega_dot, -b * omega_dot - (g / L) * np.sin(theta) + A * np.cos(omega * t)] sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval) import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g, L, b, A, omega = 9.81, 1.0, 0.5, 1.2, 2/3 t_span = (0, 100) t_eval = np.linspace(*t_span, 5000) y0 = [0.2, 0.0] def pendulum(t, y): theta, omega_dot = y return [omega_dot, -b * omega_dot - (g / L) * np.sin(theta) + A * np.cos(omega * t)] sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval)","title":"Python Simulation Outline"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}